parameters:
- name: ENV 
  displayName: Environment 
  type: string
  default: dev
  values:
    - dev
    - uat
    - prod

- name: APPS 
  displayName: Environment 
  type: object
  default:
    - one-color
    - two-color
    - three-color

variables:
  - name: directoryPattern
    value: 'helm/${{ parameters.ENV }}'  # Modify this pattern according to your needs

resources:
  repositories:
    - repository: templates
      type: github
      name: pagopa/azure-pipeline-templates
      ref: refs/tags/v6.8.0
      endpoint: 'azure-devops-github-ro'

pool:
  vmImage: ubuntu-latest

stages:
  - stage: ProcessChanges
    jobs:
    - job: ProcessAndConvert
      pool:
        vmImage: 'ubuntu-latest'
      steps:
      - checkout: self
        fetchDepth: 0  # Necessary to get the full history for comparison
  
      - task: UsePythonVersion@0
        inputs:
          versionSpec: '3.x'
          addToPath: true
  
      - task: PythonScript@0
        name: ProcessString  # Aggiungiamo un nome a questo task per riferirci ad esso pi√π tardi
        displayName: 'Process String and Convert to JSON'
        inputs:
          scriptSource: 'inline'
          script: |
            import json
            import subprocess
            # Esegui il comando bash e ottieni l'output
            command = "git diff --name-only --diff-filter=d origin/main...HEAD | xargs -I {} dirname {} | sort -u"
            str = subprocess.check_output(command, shell=True).decode('utf-8').strip()
            print("Input string:", str)
            
            # Passo 1: Rimuovere tutte le voci che non hanno "helm/dev"
            filtered_list = [item for item in str.split('\n') if "helm/dev" in item]
            print("Filtered list:", filtered_list)
            
            # Passo 2: Rimuovere "helm/dev" dalle voci rimanenti
            cleaned_list = [item.replace("helm/dev/", "") for item in filtered_list]
            print("Cleaned list:", cleaned_list)
            
            # Passo 3: Convertire il risultato in una stringa JSON
            result_json = json.dumps(cleaned_list)
            
            print(f'##vso[task.setvariable variable=resultJson;isOutput=true]{result_json}')
            print(f'Risultato JSON: {result_json}')
      - task: Bash@3
        name: EchoResultJson
        displayName: 'Echo Result JSON Array'
        inputs:
          targetType: 'inline'
          script: |
            echo "Risultato JSON Array:"
            echo '$(ProcessString.resultJson)'
            echo "##vso[task.setvariable variable=savedResultJsonArray;isOutput=true]$(ProcessString.resultJson)]"

  - stage: ProcessItems
    dependsOn: ProcessChanges
    variables:
      resultJsonArrayPython: $[ stageDependencies.ProcessChanges.ProcessAndConvert.outputs['ProcessString.resultJson'] ]
      resultJsonArrayBash: $[ stageDependencies.ProcessChanges.ProcessAndConvert.outputs['EchoResultJson.savedResultJsonArray'] ]
    jobs:
    - job: Display_Variables
      steps:
      - bash: |
          echo "Changed applications:"
          echo 'resultJsonArrayBash: $(resultJsonArrayBash)'
          echo 'resultJsonArrayPython: $(resultJsonArrayPython)'
        displayName: 'Display Changed Apps'

    - ${{ each item in parameters.APPS }}:
      - job: process_${{ replace(item, '-', '_') }}
        displayName: 'Process ${{ item }}'
        condition: and(succeeded(), contains(variables['resultJsonArrayBash'], '${{ item }}'))
        steps:
        - bash: |
            echo "Processing item: ${{ item }}"
            echo "This item was found in the changed applications list."
            # Aggiungi qui le azioni specifiche per questo item
          displayName: 'Process ${{ item }}'
