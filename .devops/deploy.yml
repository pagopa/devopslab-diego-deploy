trigger: none  # Disabilita i trigger automatici su push

pr:
  branches:
    include:
      - main
  paths:  
    include:
    - 'helm/dev/**'

schedules:
- cron: "0 0 * * *"
  displayName: Nightly batch run
  branches:
    include:
    - main
  always: true

parameters:
- name: ENV 
  displayName: Environment 
  type: string
  default: dev
  values:
    - dev
    - uat
    - prod

- name: APPS 
  displayName: Environment 
  type: object
  default:
    - one-color
    - two-color
    - three-color

variables:
  - name: directoryPattern
    value: 'helm/${{ parameters.ENV }}'
  - name: isCompleteRun
    value: $[ne(variables['Build.Reason'], 'PullRequest')]

resources:
  repositories:
    - repository: templates
      type: github
      name: pagopa/azure-pipeline-templates
      ref: refs/tags/v6.8.0
      endpoint: 'azure-devops-github-ro'

pool:
  vmImage: ubuntu-latest

stages:
  - stage: PrGitChangedFolders
    condition: and(succeeded(), eq(variables.isCompleteRun, false))
    jobs:
    - job: FindGitChangedFolder
      pool:
        vmImage: 'ubuntu-latest'
      steps:
      - checkout: self
        fetchDepth: 0
  
      - task: UsePythonVersion@0
        inputs:
          versionSpec: '3.x'
          addToPath: true
  
      - task: PythonScript@0
        name: GrepGitFolders
        displayName: 'Process String and Convert to JSON'
        inputs:
          scriptSource: 'inline'
          script: |
            import json
            import subprocess
            
            print("Starting the process...")
            
            command = "git diff --name-only --diff-filter=d origin/main...HEAD | xargs -I {} dirname {} | sort -u"
            print(f"Executing command: {command}")
            
            str = subprocess.check_output(command, shell=True).decode('utf-8').strip()
            print(f"Command output: {str}")
            
            filtered_list = [item for item in str.split('\n') if "helm/dev" in item]
            print(f"Filtered list: {filtered_list}")
            
            cleaned_list = [item.replace("helm/dev/", "") for item in filtered_list]
            print(f"Cleaned list: {cleaned_list}")
            
            result_json = json.dumps(cleaned_list)
            print(f"Final JSON result: {result_json}")
            
            print(f'##vso[task.setvariable variable=resultJson;isOutput=true]{result_json}')
            print("Process completed.")

      - task: Bash@3
        name: EchoResultJson
        displayName: 'Echo Result JSON Array'
        inputs:
          targetType: 'inline'
          script: |
            echo "Risultato JSON Array:"
            echo '$(GrepGitFolders.resultJson)'
            echo "##vso[task.setvariable variable=savedResultJsonArray;isOutput=true]$(GrepGitFolders.resultJson)]"

  - stage: ProcessItems
    dependsOn: 
      - PrGitChangedFolders
    condition: always()
    variables:
      ${{ if eq(variables.isCompleteRun, false) }}:
        resultJsonArrayPython: $[dependencies.PrGitChangedFolders.outputs['FindGitChangedFolder.GrepGitFolders.resultJson']]
        resultJsonArrayBash: $[dependencies.PrGitChangedFolders.outputs['FindGitChangedFolder.EchoResultJson.savedResultJsonArray']]
        dd: false
      ${{ if eq(variables.isCompleteRun, true) }}:
        resultJsonArrayPython: '${{ convertToJson(parameters.APPS) }}'
        resultJsonArrayBash: '${{ convertToJson(parameters.APPS) }}'
        dd: true
    jobs:
    - deployment: update_root_app
      pool: 
        name: $(DEV_AGENT_POOL)
      environment: ${{ parameters.ENV }}
      strategy:
        runOnce:
          deploy:
            steps:
            - bash: |
                echo "Is this a complete run? $(isCompleteRun)"
                echo "Changed applications:"
                echo 'resultJsonArrayBash: $(resultJsonArrayBash)'
                echo 'resultJsonArrayPython: $(resultJsonArrayPython)'
                echo 'dd: $(dd)'
                echo 'other: $[dependencies.PrGitChangedFolders.outputs['FindGitChangedFolder.GrepGitFolders.resultJson']]'

                # Login to ArgoCD
                curl -sSL -o /tmp/argocd-v2.12.4 https://github.com/argoproj/argo-cd/releases/download/v2.12.4/argocd-linux-amd64
                chmod +x /tmp/argocd-v2.12.4
                sudo mv /tmp/argocd-v2.12.4 /usr/local/bin/argocd 

                argocd login $ARGOCD_SERVER --username $ARGOCD_USERNAME --password $ARGOCD_PASSWORD --insecure --grpc-web

                # Sync the app
                argocd app sync root-diego-app --prune
                echo "✅ root-app synched"
              displayName: 'Display Changed Apps'

    - ${{ each item in parameters.APPS }}:
      - deployment: deploy_${{ replace(item, '-', '_') }}
        displayName: 'Deploy ${{ item }}'
        pool: 
          name: $(DEV_AGENT_POOL)
        environment: ${{ parameters.ENV }}
        dependsOn: update_root_app
        condition: >
          and(
            succeeded(),
            or(
              and(
                eq(variables.isCompleteRun, false),
                contains(variables['resultJsonArrayPython'], '${{ item }}')
              ),
              eq(variables.isCompleteRun, true)
            )
          )
        strategy:
          runOnce:
            deploy:
              steps:
              - bash: |
                  echo "Deploying item: ${{ item }}"
                  echo "This item was found in the changed applications list, or it's a complete run (PR or main branch)."
                displayName: 'Process ${{ item }}'
              - bash: |
                  # Login to ArgoCD
                  curl -sSL -o /tmp/argocd-v2.12.4 https://github.com/argoproj/argo-cd/releases/download/v2.12.4/argocd-linux-amd64
                  chmod +x /tmp/argocd-v2.12.4
                  sudo mv /tmp/argocd-v2.12.4 /usr/local/bin/argocd 

                  argocd login $ARGOCD_SERVER --username $ARGOCD_USERNAME --password $ARGOCD_PASSWORD --insecure --grpc-web

                  # Sync the app
                  app_name=${{ item }}
                  argocd app sync "$app_name" --prune
                  echo "✅ Syncing app: $app_name"

                displayName: 'Sync ArgoCD App: ${{ item }}'
                env:
                  ARGOCD_SERVER: $(argocdServer)
                  ARGOCD_USERNAME: $(argocdUsername)
                  ARGOCD_PASSWORD: $(argocdPassword)
