parameters:
- name: ENV 
  displayName: Environment 
  type: string
  default: dev
  values:
    - dev
    - uat
    - prod
- name: APPS 
  displayName: Applications to Process
  type: object
  default:
    - two-color
    - three-color

variables:
  - name: directoryPattern
    value: 'helm/${{ parameters.ENV }}'

resources:
  repositories:
    - repository: templates
      type: github
      name: pagopa/azure-pipeline-templates
      ref: refs/tags/v6.8.0
      endpoint: 'azure-devops-github-ro'

pool:
  vmImage: ubuntu-latest

stages:
  - stage: ProcessChanges
    jobs:
    - job: ProcessAndConvert
      steps:
      - checkout: self
        fetchDepth: 0

      - task: UsePythonVersion@0
        inputs:
          versionSpec: '3.x'
          addToPath: true

      - task: PythonScript@0
        name: ProcessString
        displayName: 'Process String and Convert to JSON'
        inputs:
          scriptSource: 'inline'
          script: |
            import json
            import subprocess

            command = f"git diff --name-only --diff-filter=d origin/main...HEAD | grep '{variables.directoryPattern}' | xargs -I {{}} dirname {{}} | sort -u | sed 's|{variables.directoryPattern}/||g'"
            str = subprocess.check_output(command, shell=True).decode('utf-8').strip()
            print(f"Input string: {str}")
            
            result_list = str.split('\n') if str else []
            result_json = json.dumps(result_list)
            
            print(f'##vso[task.setvariable variable=resultJson;isOutput=true]{result_json}')
            print(f'Risultato JSON: {result_json}')

      - task: Bash@3
        name: EchoResultJson
        displayName: 'Echo Result JSON Array'
        inputs:
          targetType: 'inline'
          script: |
            echo "Risultato JSON Array:"
            echo '$(ProcessString.resultJson)'
            echo "##vso[task.setvariable variable=savedResultJsonArray;isOutput=true]$(ProcessString.resultJson)"

  - stage: ProcessItems
    dependsOn: ProcessChanges
    variables:
      resultJsonArray: $[ stageDependencies.ProcessChanges.ProcessAndConvert.outputs['EchoResultJson.savedResultJsonArray'] ]
    jobs:
    - job: DisplayChangedApps
      steps:
      - bash: |
          echo "Changed applications:"
          echo '$(resultJsonArray)'
        displayName: 'Display Changed Apps'

    - ${{ each item in parameters.APPS }}:
      - job: process_${{ replace(item, '-', '_') }}
        displayName: 'Process ${{ item }}'
        condition: and(succeeded(), contains(variables['resultJsonArray'], '${{ item }}'))
        steps:
        - bash: |
            echo "Processing item: ${{ item }}"
            echo "This item was found in the changed applications list."
            # Aggiungi qui le azioni specifiche per questo item
          displayName: 'Process ${{ item }}'
