parameters:
- name: ENV 
  displayName: Environment 
  type: string
  default: dev
  values:
    - dev
    - uat
    - prod
- name: APPS 
  displayName: Environment 
  type: object
  default:
    - one-color
    - two-color
    - three-color


variables:
  - name: directoryPattern
    value: 'helm/${{ parameters.ENV }}'  # Modify this pattern according to your needs

resources:
  repositories:
    - repository: templates
      type: github
      name: pagopa/azure-pipeline-templates
      ref: refs/tags/v6.8.0
      endpoint: 'azure-devops-github-ro'

pool:
  vmImage: ubuntu-latest

stages:
  - stage: ProcessChanges
    jobs:
    - job: ProcessAndConvert
      pool:
        vmImage: 'ubuntu-latest'
      steps:
      - checkout: self
        fetchDepth: 0  # Necessary to get the full history for comparison
  
      - task: UsePythonVersion@0
        inputs:
          versionSpec: '3.x'
          addToPath: true
  
      - task: PythonScript@0
        name: ProcessString  # Aggiungiamo un nome a questo task per riferirci ad esso pi√π tardi
        displayName: 'Process String and Convert to JSON'
        inputs:
          scriptSource: 'inline'
          script: |
            import json
            import subprocess

            # Esegui il comando bash e ottieni l'output
            command = "git diff --name-only --diff-filter=d origin/main...HEAD | xargs -I {} dirname {} | sort -u"
            str = subprocess.check_output(command, shell=True).decode('utf-8').strip()
            print("Input string:", str)
            
            # Passo 1: Rimuovere tutte le voci che non hanno "helm/dev"
            filtered_list = [item for item in str.split('\n') if "helm/dev" in item]
            print("Filtered list:", filtered_list)
            
            # Passo 2: Rimuovere "helm/dev" dalle voci rimanenti
            cleaned_list = [item.replace("helm/dev/", "") for item in filtered_list]
            print("Cleaned list:", cleaned_list)
            
            # Passo 3: Convertire il risultato in una stringa JSON
            result_json = json.dumps(cleaned_list)
            
            print(f'##vso[task.setvariable variable=resultJson;isOutput=true]{result_json}')
            print(f'Risultato JSON: {result_json}')

      - task: Bash@3
        name: EchoResultJson
        displayName: 'Echo Result JSON Array'
        inputs:
          targetType: 'inline'
          script: |
            echo "Risultato JSON Array:"
            echo '$(ProcessString.resultJson)'
            echo "##vso[task.setvariable variable=savedResultJsonArray;isOutput=true]ciao]"

  - stage: ProcessItems
    dependsOn: ProcessChanges
    variables:
      resultJsonArray: $[stageDependencies.ProcessChanges.ProcessAndConvert.outputs['EchoResultJson.savedResultJsonArray']]
      # resultJsonArray: "ciaoo"
    jobs:
    - ${{ each item in parameters.APPS }}:
      - job: process_${{ replace(item, '-', '_') }}
        displayName: 'Process ${{ item }}'
        steps:
        - script: |
            echo "Processing item: ${{ item }}"
            echo "resultJsonArray: $(resultJsonArray)"
            # Aggiungi qui le azioni specifiche per questo item
          displayName: 'Process ${{ item }}'
  
  # - stage: FinalStage
  #   dependsOn: ProcessItems
  #   jobs:
  #   - job: FinalJob
  #     steps:
  #     - script: |
  #         echo "All items have been processed"
  #       displayName: 'Final Step'

  # - stage: SyncApps
  #   dependsOn: IdentifyChanges
  #   jobs:
  #   - ${{ each dir in dependencies.IdentifyChanges.outputs['FindChangedDirectories.SetVars.filteredDirs'] }}:
  #     - job: Sync_${{ replace(dir, '/', '_') }}
  #       pool:
  #         vmImage: 'ubuntu-latest'
  #       steps:
  #       - task: InstallSSHKey@0
  #         inputs:
  #           knownHostsEntry: 'KNOWN_HOSTS_ENTRY'
  #           sshPublicKey: '$(ARGOCD_SSH_PUBLIC_KEY)'
  #           sshKeySecureFile: 'argocd_ssh_key'
  #         displayName: 'Install SSH key for ArgoCD'

  #       - bash: |
  #           # Login to ArgoCD
  #           argocd login $ARGOCD_SERVER --username $ARGOCD_USERNAME --password $ARGOCD_PASSWORD --insecure

  #           # Sync the app
  #           app_name=$(basename "${{ dir }}")
  #           echo "Syncing app: $app_name"
  #           argocd app sync "$app_name" --prune
  #         displayName: 'Sync ArgoCD App: ${{ dir }}'
  #         env:
  #           ARGOCD_SERVER: $(argocdServer)
  #           ARGOCD_USERNAME: $(argocdUsername)
  #           ARGOCD_PASSWORD: $(argocdPassword)

  # - stage: RunNewmanTests
  #   dependsOn: SyncApps
  #   jobs:
  #   - ${{ each dir in dependencies.IdentifyChanges.outputs['FindChangedDirectories.SetVars.filteredDirs'] }}:
  #     - job: NewmanTest_${{ replace(dir, '/', '_') }}
  #       pool:
  #         vmImage: 'ubuntu-latest'
  #       steps:
  #       - task: NodeTool@0
  #         inputs:
  #           versionSpec: '14.x'
  #         displayName: 'Install Node.js'

  #       - script: |
  #           npm install -g newman
  #         displayName: 'Install Newman'

  #       - script: |
  #           app_name=$(basename "${{ dir }}")
  #           collection_path="${{ dir }}/tests/postman_collection.json"
  #           environment_path="${{ dir }}/tests/postman_environment.json"
            
  #           if [ -f "$collection_path" ]; then
  #             if [ -f "$environment_path" ]; then
  #               newman run "$collection_path" -e "$environment_path"
  #             else
  #               newman run "$collection_path"
  #             fi
  #           else
  #             echo "No Postman collection found for $app_name. Skipping Newman tests."
  #           fi
  #         displayName: 'Run Newman Tests for ${{ dir }}'
